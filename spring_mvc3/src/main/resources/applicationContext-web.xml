<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	                    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd ">

	<!-- 这里设置Controller所在的包位置，所有使用annotation的类都会自动加载 -->
	<context:component-scan base-package="*" />

	<!--
		视图解析器，由FontController控制，根据SubController返回值调用
		具体是：subController返回modelAndView或String，由该name前面加上prefix，后面加上subfix形成物理文件地址
	-->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!--
			viewClass常用有： org.springframework.web.servlet.view.JstlView
			org.springframework.web.servlet.view.freemarker.FreeMarkerView
			org.springframework.web.servlet.view.velocity.VelocityView
			viewClass可以不写，会自动匹配
		-->
		<!--
			<property name="viewClass"
			value="org.springframework.web.servlet.view.JstlView" />
		-->
		<property name="prefix" value="/WEB-INF/jsp/" />
		<property name="suffix" value=".jsp" />
		<property name="order" value="2" /> <!-- 多个viewResolver时配置 -->
	</bean>
	
    <!-- 配置Velocity引擎 -->
	<bean id="velocityConfigurer" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
        <property name="resourceLoaderPath" value="/WEB-INF/velocity/" />
        <property name="velocityProperties">
			<props>
				<prop key="input.encoding">UTF-8</prop>
				<prop key="output.encoding">UTF-8</prop>
			</props>
		</property>
    </bean>
    
    <!-- 解析Velocity视图，如果没有layout则用VelocityViewResolver -->
    <bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityLayoutViewResolver">
        <property name="cache" value="true" />
        <property name="suffix" value=".vm" />
        <property name="contentType" value="text/html;charset=UTF-8" />
        <property name="order" value="1" /> <!-- 多个viewResolver时配置，order越小越优先匹配到 -->
        <property name="toolboxConfigLocation" value="/WEB-INF/classes/vm_toolbox.xml" />
    </bean>
	
	<!-- 上傳文件 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8"></property>
<!--         <property name="maxUploadSize">5242880</property> -->
    </bean>

    <!-- 拦截器，拦截器有顺序，因此用注解配置并不合适 -->
    <mvc:interceptors>
        <bean class="spring_mvc3.web.interceptor.SpringMVCInterceptor"></bean>
        <bean class="spring_mvc3.web.interceptor.SyncRequestModelInterceptor"></bean>
        <!-- 拦截时，支持*通配符和**下级目录全部 -->
<!--         <mvc:interceptor> -->
<!--             <mvc:mapping path=""/> 可以指定对哪些链接做拦截 -->
<!--             <bean></bean> -->
<!--             <mvc:exclude-mapping path=""/> 可以指定对哪些链接不做拦截 -->
<!--         </mvc:interceptor> -->
    </mvc:interceptors>
    
    <!-- 全局异常处理器 -->
    <bean class="spring_mvc3.web.exception_handler.GlobalExceptionHandler"/>  

    <!-- 自定义转换器 -->
    <!-- mvc:annotation-driven 实际开发一般都加强，增强功能，例如conversionService @ResponseBody   -->
	<!-- 
	    【重要】当引入自定义conversion-service时，@DateTimeFormat @NumberFormat 就不起作用了
	    默认的conversion-service 是 FormattingConversionService
	    解决方法是自定义的用 org.springframework.format.support.FormattingConversionServiceFactoryBean
	    代替org.springframework.context.support.ConversionServiceFactoryBean
	 -->
	<mvc:annotation-driven conversion-service="conversionService">
	    <mvc:message-converters>
	        <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
	            <property name="features">
                    <array value-type="com.alibaba.fastjson.serializer.SerializerFeature">
<!--                         <value>PrettyFormat</value> -->
                        <value>WriteDateUseDateFormat</value>
                    </array>
                </property>
	        </bean>
	    </mvc:message-converters>
	    <!-- 配置@JsonParam自动转换 -->
	    <mvc:argument-resolvers>
            <bean class="spring_mvc3.web.json_param_support.JsonParamArgumentResolver"/>  
        </mvc:argument-resolvers> 
	</mvc:annotation-driven>
	
	<bean id="conversionService"
		class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<property name="converters">
			<list>
				<bean class="spring_mvc3.web.converter.StringToDateConverter" />
			</list>
		</property>
	</bean>
	
</beans>