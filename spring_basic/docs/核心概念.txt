Spring的核心就是依赖注入DI和面向切面AOP。

Spring是轻量级入侵的，意味着业务代码没有任何痕迹表名用了Spring，最多只用了Spring的注解，但依然是POJO的。

Spring提供两个基本的容器：BeanFactory(提供基本DI支持)和ApplicationContext(应用上下文，支持监听)

* 我理解的依赖注入，就是Spring管理了一个对象容器，管理了对象的创建/销毁，自动将对象set进去另外一个对象。
  有了依赖注入，对象A使用对象B时，不关心对象B的创建过程和怎样拿到B对象，只要注解一下，就拿到了B对象。

* 而AOP是很好用的特性，但也是一把双刃剑。
AOP的存在是为了解耦，如果业务A完全不需要关心B的存在和处理逻辑，那么B就非常合适用切面实现。
实际上A和B完全不关心的情况并不多，但还是有的，例如登录、日志（异常、执行时间记录），这些是AOP的典型用法。
想象这个场景，大超市要检查客人离开时有没有偷东西，直接开包检查是绝对不可能的，法律和效率都不满足。
所以超市出口有检测仪器，如果商品没有付款没消磁，就会报警，这些对客户买东西离开是无感知的，所以这种检测方式就一种AOP的例子。
AOP也有错误使用的例子，例如架构上，全局的缓存读写就创建了一个系统单点，系统将强依赖于缓存的稳定性。

